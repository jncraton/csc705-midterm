% Modern Language Survey
% Jon Craton

Assignment
==========

The landscape of programming languages being used currently is constantly changing.  Often we will see 
articles etc. saying this or that language is the most popular, or is the new big thing, or is where all 
the 
jobs are.  I would 
like you to research this issue
to get a feel for what is the true nature of the use of 
programming languages
.  I want you to go deeper than just finding one article with a list of languages.  
You need to really look at things like w
hat are they basing it on? How extensive is it?  Is it focused 
towards a particular market or industry?
I would like “rankings” (loose interpretation) of the languages (Top 
10 give or take a couple)
addressed 
in separate categories:
a)
Most Popular
b)
Most Use
d
c)
Most installed Base
{this does not enclose things like a compiler that is shipped with every copy 
of an OS ...}
Of course there is going to be a lot of variations on what you find so you will have to do your best to 
weed through all the information.  The
re are many that base everything on the number of 
questions
asked about a language on an online help site, or the number of hits a particular download site has for a 
particular language.  Make sure you take into account what the information you are working
with is 
based on.  It is your job to try and 
distill several sources for this and give your best estimates.  Make sure 
you source your work.  A nice summary of each category (a,b,c) of what you found is expected along 
with the rankings

Popular
=======

IEEE Spectrum provides an annual programming language popularity list[2]. This is derived from several difference sources of information on programming languages. Here is their list:

![](ieee_spectrum_2017_rankings.png)

The IEEE methodology is complex, so it is difficult to determine simple strengths and weaknesses. Being an engineering organization, the IEEE results are likely biased towards science and engineering work. We don't see Javascript on this list, although it tops other lists.

Looking at the top 5 from that list using Google Trends can give us a sense for how popular these langauges are over time:

![](ieee_gtrends.png)

Looking at the Google Trends data, it is clear that web searches for Java have been slowly decresing over the last decade. This is likely linked to a decrease in popularity. Likewise, there has been steady growth in search traffic for Python showing that it has been growing in popularity.

Github also noted this in terms of year-over-year trends for 2017[3]:

> Python replaced Java as the second-most popular language on GitHub, with 40 percent more pull requests opened this year than last. Typescript was also on the rise in 2017, used in almost four times as many pull requests as last year.

Looking at the most popular tags on StackOverflow gives the following[4]:

1. javascript ×1633017
2. java ×1426689
3. c# ×1217914
4. php ×1204764
5. python ×97171
6. html ×755724
7. c++ ×574468
8. css ×540085
9. sql ×445656

The TIOBE index is also a source for popularity information[7]. It is based primarily on weighted search engine popularity. He are the most popular languages according to that metric:

1. Java
2. C
3. C++
4. Python
5. C#
6. VB .NET
7. PHP
8. JavaScript
9. SQL
10. R

The annual StackOverflow survey also provides data on salary by programming language.[9] This provides a different angle on the question of language popularity by hinting at the supply vs demand for programming languages. Here was their top 10:

1. F# $74k
2. Ocaml $73k
3. Clojure $72k
4. Groovy $72k
5. Perl $69k
6. Rust $69k
7. Erlang $67k
8. Scala $67k
9. Go $66k
10. Ruby $64k

Based on thinking through the above, the following are my popularity rankings:

1. Python
2. JavaScript
3. Java
4. C#
5. Ruby
6. Objective-C
7. C
8. C++
9. PHP

I put Python at the top because it has become very trendy recently. It's not a new language, but it seems to finally be mature enough for a wide variety of uses. JavaScript continues to be popular for both front-end and back-end web work and is perhaps the most widely supported language in the world being baked in to nearly all modern web browsers.

The rest of the list consists of languages that aren't trendy by any means, but that have stood the test of time and are still widely used today. C/C++ are still popular, though many new projects that need the raw performance that these languages can deliver are beginning to choose more recent languages such as Go and Rust.

Most Used
=========

The annual StackOverflow user survey is a great source of information about language usage by developers[1].According to a multiple choice question asking developers (n=78,334) which language they use, these are the most used languages:

- JavaScript - 69.8%
- HTML - 68.5%
- CSS - 65.1%
- SQL - 57.0%
- Java - 45.3%
- Bash/Shell - 39.8%
- Python - 38.8%
- C# - 34.4%
- PHP - 30.7%
- C++ - 25.4%
- C - 23.0%
- TypeScript - 17.4%
- Ruby - 10.1%
- Swift - 8.1%
- Assembly - 7.4%
- Go - 7.1%
- Objective-C - 7.0%
- VB.NET - 6.7%
- R - 6.1%
- Matlab - 5.8%
- VBA - 4.9%
- Kotlin - 4.5%
- Scala - 4.4%
- Groovy - 4.3%
- Perl - 4.2%

Github also publishes statistics on programming language usage. Here is a nice graph showing the most popular languages on Github sorted by number of open pull requests[3]:

![](github-prs.png)

Github is very biased as it focuses on open source projects, but this does do a nice job of caputuring the current hot languages for open source work. It's worth noting that you don't see a compiled language until you hit the sixth spot on that list.

RedMonk publishes a quarterly ranking that combines both Github and StackOverflow popularity. They produce a nice 2-axis graphic:

![](redmonk-rankings.png)

The top 10 languages using this combined metric are:

1. JavaScript
2. Java
3. Python
4. PHP
5. C#
6. C++
7. CSS
8. Ruby
9. C
10. Swift

It makes a lot of sense to me to look at language usage in terms of published open source projects and StackOverflow questions and answers. These are the rankings that I would use based directly on the above but with CSS removed as though it is technically Turing complete, I do not think it makes sense to think of it as a programming language.

1. JavaScript
2. Java
3. Python
4. PHP
5. C#
6. C++
7. Ruby
8. C
9. Swift

Most Installed
==============

Debian maintains a list of packages sorted by the number of installations. These statisics are only collected from users who have specificially opted in by installing the popularity-contest package, so the totals are not actual number of live installations. These only serve as a relative metric. Here are the top programming language packages installed using Debian's apt package system[5]:

1. Perl - 197k installed
2. Bash - 197k installed
3. Python 194k installed
4. cpp - 156k installed
5. gcc - 119k installed
6. java-common - 112k installed
7. ruby - 68k installed
8. php5-common - 45k installed
9. nodejs 32k installed

It's no surprise that the top 5 installed langages on one of the popular Linux distros are Perl, Bash, Python, C++, and C. Perl, Bash, and Python are popular scripting languages that are often required by other open source tools. C and C++ are required to compile many open source tools.

Homebrew (the most popular Mac package manager) also tracks install statistics. These are the most popular programming languages that were installed on request (not as a dependency) this year[10]:

1. 	node (JavaScript) 	2,285,814
2. 	python 	1,469,282 	
3. 	python3 	781,991 
4. 	mysql 	690,489 
5. 	go 	490,660 
6. 	ruby 	400,890 
7. 	gcc (C) 	284,863 
8.  php 137,339 

We can also look at the most popular languages installed to power large web backends:

![](web-backend.png)

My list for the most installed languages is:

1. JavaScript - Based on nodejs being most popular in Homebrew and being available as part of all modern browsers for front-end development.
2. Python - Due to popularity on Mac and Linux while also have a strong following in the data science community.
3. SQL - Between the various DBMS that implement SQL, I think it is fair to say that it is very widely used and installed.
4. C - This is still the systems programming language. Low-level packages will require C when building from source, and performance parts of programs are still often written in pure C.
5. C++ - While this language appears to be on its way out, its legacy still makes it very common to have installed.
6. Java - Java is still incredibly popular for writing portable software and is very commonly installed by developers.
7. Go - Go appears to be replacing C++ as the modern compiled language of choice. This shows both in Debian and Homebrew installs.
8. Ruby - Thanks largely to Rails, Ruby still has a very large install base.
9. PHP - PHP is still very commonly used for back-end web development and shows up near the end in both Debian and Homebrew.

I've left out Perl as it comes prepackaged with the OS frequently. While it is a legitimate programming language, it is most generally used for OS scripting tasks. I've left out VisualBasic, Bash, and Powershell for the same reasons.

Conclusion
==========

There are many ways to consider the current "top" languages. This provides a brief overview of some of these along with my personal interpretation of some of the results.

1. https://insights.stackoverflow.com/survey/2018/#technology
2. https://spectrum.ieee.org/computing/software/the-2017-top-programming-languages
3. https://octoverse.github.com/
4. https://stackoverflow.com/tags?tab=popular
5. https://popcon.debian.org/main/by_inst
6. https://redmonk.com/sogrady/2018/03/07/language-rankings-1-18/
7. https://www.tiobe.com/tiobe-index/
8. https://www.tiobe.com/tiobe-index/programming-languages-definition/
9. https://insights.stackoverflow.com/survey/2018#top-paying-technologies
10. https://formulae.brew.sh/analytics/install-on-request/365d/
11. https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites
