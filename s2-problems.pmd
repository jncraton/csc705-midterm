% Midterm Section 2 - Problem Set
% Jon Craton

3.5
===

> Consider the following pseudocode:

    1.  procedure main()
    2.    a : integer := 1
    3.    b : integer := 2
    4.    procedure middle()
    5.      b : integer := a
    6.      procedure inner()
    7.        print a, b
    8.        a : integer := 3
    9.        – – body of middle
    10.        inner()
    11.        print a, b
    12.      –– body of main
    13.       middle()
    14.       print a, b

> Suppose this was code for a language with the declaration-order rules of C (but with nestedsubroutines)—that is, names must be declared before use, and the scope of a name extends from its declaration through the end of the block. At each print statement, indicate which declarations of a and b are in the referencing environment. What does the program print (or will the compiler identify static semantic errors)? Repeat the exercise for the declaration-order rules of C# (names must be declared before use, but the scope of a name is the entire block in which it is declared) and of Modula-3 (names can be declared in any order, and their scope is the entire block in which they are declared).

C Rules
-------

- Names must be declared before use
- The scope of a name extends from its declaration through the end of the block

    1.  procedure main()
    2.    a : integer := 1 // a is declared and set to 0x01
    3.    b : integer := 2 // b is declared and set to 0x02
    4.    procedure middle()
    5.      b : integer := a // b is redeclared in middle's block scope and set to 0x01
    6.      procedure inner()
    7.        print a, b
    8.        a : integer := 3 // a is redeclared in inner's scope and set to 0x03
    9.      –– body of middle
    10.     inner()
    11.     print a, b
    12.   –– body of main
    13.   middle()
    14.   print a, b

Output is:

    1 1 (Line 7)
    1 1 (Line 11)
    1 2 (Line 14)

C# Rules
--------

- Names must be declared before use
- **The scope of a name is the entire block in which it is declared**

This produces a syntax error, as inner attempts to access `a` before it is declared.

Module-3 Rules
--------------

- **Names can be declared in any order**
-  Scope is the entire block in which they are declared

Output is:

    1 3
    1 1
    1 2

3.19
====

> Consider the following pseudocode:

    x : integer := 1
    y : integer := 2
    
    procedure add()
      x := x + y
      
    procedure second(P : procedure)
      x : integer := 2
      P()
    
    procedure first()
      y : integer := 3
      second(add)
    
    first()
    write_integer(x)

> (a) What does this program print if the language uses static scoping?

Using static scoping, all functions simply reference `x` and `y` as global variables in the parent lexical scope. The program then prints 5.

We can actually do this in Python:

```python
x = 1
y = 2
def add():
  global x,y
  x = x + y
def second(P):
  global x
  x = 2
  P()
def first():
  global y
  y = 3
  second(add)
first()
print(x)
```

> (b) What does it print if the language uses dynamic scoping with deep binding?

Deep binding means that the scope of the function is bound when it is passed as an argument.

> (c) What does it print if the language uses dynamic scoping with shallow binding

Shallow binding means that the scope of the function is bound when it is called.

6.12
====

Describe a plausible scenario in which a programmer might wish to avoid short-circuit evaluation of a Boolean expression.

6.14
====

> Consider the following expression in C: `a/b > 0 && b/a > 0`.

> What will be the result of evaluating this expression when a is zero?

This expression will evaluate to false (assuming that b is non-zero). The first half of the expression will be false and short circuit the second half.

> What will be the result when b is zero?

This produces undefined behavior. Division by zero is not defined in C, but for many contexts this will cause the program to crash.

> Would it make sense to try to design a language in which this expression is guaranteed to evaluate to false when either a or b (but not both) is zero? Explain your answer.

There may be some particular context where this design could make sense, but in general it would be terrible to design a language that worked this way.

In effect, this design would require that certain exceptional behavior would be silently caught and simply evaluated to false at runtime. Consider the following code:

    def get_secret():
      return is_banned() && calculate_secret()

The above function will return some secret as long as `is_banned()` returns false. If this language was modified to catch certain exceptional behavior and simply evaluate it to false, then `calculate_secret()` could be called and return something secret due to some upstream error in `is_banned()`.

Exceptional behavior should be properly handled. I would not want to use a language that simply does it's best to do what it assumes to be helpful in this area.

6.26
====

> Rubin [Rub87] used the following example (rewritten here in C) to argue in favor of a goto statement:

    int first_zero_row = -1; /* none */
    int i, j;
    for (i = 0; i < n; i++) {
      for (j = 0; j < n; j++) {
        if (A[i][j]) goto next;
      }
      first_zero_row = i;
      break;
      next: ;
    }
    
> The intent of the code is to find the first all-zero row, if any, of an n × n matrix. Do you find the
example convincing? Is there a good structured alternative in C? In any language?

I appreciate having tools like goto available when needed for cases such as the above example. However, I believe that functions can handle this case cleanly:

    int is_all_zeroes(R,n) {
      int j;
      for (j = 0; j < n; j++) {
        if (R[j]) { return 1; }
      }
      return 0;
    }

    int i, first_zero_row = -1;
    for (i = 0; i < n; i++) {
      if (is_all_zeroes(A[i],n) {
        first_zero_row = i;
        break;
      }
    }

This can be handled even easily in more modern languages, such as Python:

```python
A = [[1,0,0],[0,0,1],[0,0,0],[0,0,1],[0,0,0]]

print([r for r in enumerate(A) if all([c==0 for c in r[1]])][0])
```
